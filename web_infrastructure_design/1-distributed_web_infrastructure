




Load Balancer (HAproxy)

Purpose: Distributes incoming traffic across multiple servers
Algorithm: Round Robin

Requests are distributed sequentially across the server pool
Each server receives requests in turn
Example: Server1 -> Server2 -> Server1 -> Server2


Setup: Active-Active

Both servers actively handle requests simultaneously
Differs from Active-Passive where the second server only activates if the first fails
Better resource utilization but requires more coordination


Multiple Servers

Provides redundancy
Eliminates single point of failure for web/application servers
Allows for load distribution
Each server contains:

Web server (Nginx)
Application server
Application files


Database Primary-Replica Cluster

Primary Node (Master):

Handles all write operations
Maintains authoritative dataset
Replicates data to replica node
Only database that can accept writes from the application


Replica Node (Slave):

Handles read operations
Provides redundancy
Can be promoted to primary if needed
Reduces read load on primary node


How Replication Works:

Primary records all changes in binary log
Replica copies binary log
Replica applies changes to stay synchronized
Asynchronous replication by default


Infrastructure Issues
Single Points of Failure (SPOF)

Load balancer is a SPOF
Database Primary node is a SPOF
No redundancy for load balancer

Security Issues

No firewall implemented
No HTTPS encryption

Data transmitted in plain text
Vulnerable to man-in-the-middle attacks


No network segmentation

Monitoring Limitations

No monitoring solutions implemented
Cannot track:

Server health
Resource utilization
Application performance
Security threats
Response times


No alerting system for issues
No performance metrics collection

Infrastructure Improvement Suggestions

Add redundant load balancer
Implement firewalls
Add SSL/TLS certificates
Set up monitoring system
Add data center redundancy
Implement automated backups